#FORCEADD
@bot.tree.command(name="forceadd", description="Force-add voyages, subclasses, or other data to a user. (BOA ONLY!)")
@option("target", description="Select the user to forceadd data to")
@option("voyages", description="Add total voyages. Note: A user may need hosted voyages added separately.", required=False)
@option("hosted", description="Add hosted voyages. Note: A user may need voyage count added separately.", required=False)
@option("carpenter", description="Add carpenter subclass points", required=False)
@option("cannoneer", description="Add cannoneer subclass points", required=False)
@option("flex", description="Add flex subclass points", required=False)
@option("helm", description="Add helm subclass points", required=False)
@option("surgeon", description="Add field surgeon subclass points", required=False)
@option("grenadier", description="Add grenadier subclass points", required=False)
@option("coin", description="Add a coin to a member (REMEMBER TO DO COIN OWNER FIELD)", autocomplete=get_coin, required=False)
@option("coinowner", description="Add name of who gave the coin (REMEMBER TO DO COIN FIELD)", required=False)
async def forceadd(ctx, target: discord.Member, voyages=None, hosted=None, carpenter=None, cannoneer=None, flex=None,
                   helm=None, surgeon=None, grenadier=None, coin=None, coinowner=None):
    
    # Check if user has BOA permissions
    if not check_permissions(ctx.author, ["Board of Admiralty"]):
        await ctx.respond("This command is restricted to BOA members only.", ephemeral=True)
        return

    # Initialize the response message
    added = ""

    # Helper function to add voyages and hosted voyages
    def add_voyages(voyage_type, value):
        nonlocal added
        if is_full_number(value):
            db_manager.log_forceadd(target.id, voyage_type, value, ctx.author.id, datetime.utcnow())
            added += f"{voyage_type} Voyages: {value}\n"
        else:
            added += f"{voyage_type} voyages were not added because the value was not a whole number.\n"

    # Helper function to add subclass points
    def add_subclass_points(subclass_name, points):
        nonlocal added
        if is_full_number(points):
            db_manager.log_subclasses(ctx.author.id, "BOA OVERRIDE", target.id, subclass_name, points, datetime.utcnow())
            added += f"{subclass_name}: {points}\n"
        else:
            added += f"{subclass_name} points were not added because the value was not a whole number.\n"

    # Add voyages
    if voyages is not None:
        add_voyages("Regular", voyages)
    if hosted is not None:
        add_voyages("Hosted", hosted)

    # Subclass points handling
    subclasses = {
        "Carpenter": carpenter,
        "Cannoneer": cannoneer,
        "Flex": flex,
        "Helm": helm,
        "Surgeon": surgeon,
        "Grenadier": grenadier
    }
    for subclass_name, points in subclasses.items():
        if points is not None:
            add_subclass_points(subclass_name, points)

    # Coin handling
    if coin and coinowner is not None:
        if coin == "Regular Challenge Coin":
            db_manager.log_coin(target.id, "Regular Challenge Coin", "0", coinowner, datetime.utcnow())
            added += f"Regular Challenge Coin added by {coinowner}\n"
        elif coin == "Commanders Challenge Coin":
            db_manager.log_coin(target.id, "Commanders Challenge Coin", "0", coinowner, datetime.utcnow())
            added += f"Commanders Challenge Coin added by {coinowner}\n"
        else:
            added += "Invalid coin type. Please ensure both the coin and coinowner are correctly selected.\n"
    elif coin or coinowner:
        added += "Please ensure you've provided both a coin and coinowner.\n"

    # Final response
    if added:
        await ctx.respond(f"Operation complete:\n{added}", ephemeral=True)
    else:
        await ctx.respond("No changes were made.", ephemeral=True)
